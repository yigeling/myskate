import { Ref } from 'vue';

declare type Install<T> = T & {
  install(app: import('vue').App): void;
};
declare const _default: Install< import("vue").DefineComponent<{
    size: {
        type: StringConstructor;
        default: string;
    };
    shape: {
        type: StringConstructor;
        default: string;
    };
    bgColor: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}, {
    index: Ref<number>;
    showMax: Ref<boolean>;
    maxIndex: Ref<number>;
    classes: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    styles: import("vue").ComputedRef<{
        width: string;
        height: string;
        backgroundColor: string;
        color: string;
        marginLeft: string | false;
        zIndex: string;
    }>;
    maxStyles: import("vue").ComputedRef<{
        backgroundColor: string;
        color: string;
    }>;
    avatarGroup: any;
    visible: {
        lightTheme: boolean;
    };
    avatarRef: Ref<any>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    size: {
        type: StringConstructor;
        default: string;
    };
    shape: {
        type: StringConstructor;
        default: string;
    };
    bgColor: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}>>, {
    color: string;
    size: string;
    shape: string;
    bgColor: string;
}>>;
export default _default;

declare module 'vue' {
  interface GlobalComponents {
      NutAvatar: typeof _default;
  }
}