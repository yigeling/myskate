
declare type Install<T> = T & {
  install(app: import('vue').App): void;
};
declare const _default: Install< import("vue").DefineComponent<{
    modelValue: {
        type: (ArrayConstructor | NumberConstructor | StringConstructor)[];
        default: () => never[];
    };
    accordion: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    collapseDom: any;
    classes: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue")[], "change" | "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: (ArrayConstructor | NumberConstructor | StringConstructor)[];
        default: () => never[];
    };
    accordion: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    modelValue: string | number | unknown[];
    accordion: boolean;
}>>;
export default _default;

declare module 'vue' {
  interface GlobalComponents {
      NutCollapse: typeof _default;
  }
}