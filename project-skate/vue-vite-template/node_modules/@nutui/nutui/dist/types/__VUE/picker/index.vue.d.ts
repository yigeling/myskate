import { PropType, CSSProperties } from 'vue';
import { PickerOption } from './types';

declare type Install<T> = T & {
  install(app: import('vue').App): void;
};
declare const _default: Install< import("vue").DefineComponent<{
    modelValue: {
        type: PropType<(string | number)[]>;
        default: () => never[];
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    cancelText: {
        type: StringConstructor;
        default: string;
    };
    okText: {
        type: StringConstructor;
        default: string;
    };
    columns: {
        type: PropType<(PickerOption | PickerOption[])[]>;
        default: () => never[];
    };
    threeDimensional: {
        type: BooleanConstructor;
        default: boolean;
    };
    swipeDuration: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    showToolbar: {
        type: BooleanConstructor;
        default: boolean;
    };
    visibleOptionNum: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    optionHeight: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
}, {
    classes: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    column: import("vue").DefineComponent<{
        value: (NumberConstructor | StringConstructor)[];
        columnsType: StringConstructor;
        column: {
            type: PropType<PickerOption[]>;
            default: () => never[];
        };
        threeDimensional: {
            type: BooleanConstructor;
            default: boolean;
        };
        swipeDuration: {
            type: (NumberConstructor | StringConstructor)[];
            default: number;
        };
        visibleOptionNum: {
            type: (NumberConstructor | StringConstructor)[];
            default: number;
        };
        optionHeight: {
            type: (NumberConstructor | StringConstructor)[];
            default: number;
        };
    }, {
        setRollerStyle: (index: number) => string;
        isHidden: (index: number) => boolean;
        roller: import("vue").Ref<null>;
        onTouchStart: (event: TouchEvent) => void;
        onTouchMove: (event: TouchEvent) => void;
        onTouchEnd: () => void;
        touchRollerStyle: import("vue").ComputedRef<{
            transition: string;
            transform: string;
            top: string;
        }>;
        touchTileStyle: import("vue").ComputedRef<{
            transition: string;
            transform: string;
            top: string;
            height: string;
        }>;
        setMove: (move: number, type?: string | undefined, time?: number | undefined) => void;
        stopMomentum: () => void;
        pxCheck: (value: string | number) => string;
        maskStyles: import("vue").ComputedRef<{
            backgroundSize: string;
        }>;
        column: import("vue").Ref<PickerOption[]>;
        threeDimensional: import("vue").Ref<boolean>;
        swipeDuration: import("vue").Ref<string | number>;
        visibleOptionNum: import("vue").Ref<string | number>;
        optionHeight: import("vue").Ref<string | number>;
        value: import("vue").Ref<string | number | undefined>;
        columnsType: import("vue").Ref<string | undefined>;
        onClick: import("vue").Ref<((...args: any[]) => any) | undefined>;
        onChange: import("vue").Ref<((...args: any[]) => any) | undefined>;
        touchParams: import("vue").Ref<{
            startY: number;
            endY: number;
            startTime: number;
            endTime: number;
            lastY: number;
            lastTime: number;
        }>;
        currIndex: import("vue").Ref<number>;
        transformY: import("vue").Ref<number>;
        scrollDistance: import("vue").Ref<number>;
        rotation: import("vue").Ref<number>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "change")[], "click" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        value: (NumberConstructor | StringConstructor)[];
        columnsType: StringConstructor;
        column: {
            type: PropType<PickerOption[]>;
            default: () => never[];
        };
        threeDimensional: {
            type: BooleanConstructor;
            default: boolean;
        };
        swipeDuration: {
            type: (NumberConstructor | StringConstructor)[];
            default: number;
        };
        visibleOptionNum: {
            type: (NumberConstructor | StringConstructor)[];
            default: number;
        };
        optionHeight: {
            type: (NumberConstructor | StringConstructor)[];
            default: number;
        };
    }>> & {
        onClick?: ((...args: any[]) => any) | undefined;
        onChange?: ((...args: any[]) => any) | undefined;
    }, {
        column: PickerOption[];
        threeDimensional: boolean;
        swipeDuration: string | number;
        visibleOptionNum: string | number;
        optionHeight: string | number;
    }>;
    columnsType: import("vue").ComputedRef<"multiple" | "single" | "cascade">;
    columnsList: import("vue").ComputedRef<PickerOption[][]>;
    cancel: () => void;
    changeHandler: (columnIndex: number, option: PickerOption) => void;
    confirmHandler: () => void;
    defaultValues: import("vue").Ref<(string | number)[]>;
    translate: (keyPath: string, ...args: unknown[]) => string;
    pickerColumn: import("vue").Ref<any[]>;
    swipeRef: (el: any) => void;
    columnStyle: import("vue").ComputedRef<CSSProperties>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("cancel" | "change" | "update:modelValue" | "confirm")[], "cancel" | "change" | "update:modelValue" | "confirm", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: PropType<(string | number)[]>;
        default: () => never[];
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    cancelText: {
        type: StringConstructor;
        default: string;
    };
    okText: {
        type: StringConstructor;
        default: string;
    };
    columns: {
        type: PropType<(PickerOption | PickerOption[])[]>;
        default: () => never[];
    };
    threeDimensional: {
        type: BooleanConstructor;
        default: boolean;
    };
    swipeDuration: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    showToolbar: {
        type: BooleanConstructor;
        default: boolean;
    };
    visibleOptionNum: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    optionHeight: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
}>> & {
    onChange?: ((...args: any[]) => any) | undefined;
    onCancel?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onConfirm?: ((...args: any[]) => any) | undefined;
}, {
    title: string;
    modelValue: (string | number)[];
    threeDimensional: boolean;
    swipeDuration: string | number;
    visibleOptionNum: string | number;
    optionHeight: string | number;
    cancelText: string;
    okText: string;
    columns: (PickerOption | PickerOption[])[];
    showToolbar: boolean;
}>>;
export default _default;

declare module 'vue' {
  interface GlobalComponents {
      NutPicker: typeof _default;
  }
}