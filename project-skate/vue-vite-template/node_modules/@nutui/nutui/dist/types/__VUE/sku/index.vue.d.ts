import { PropType } from 'vue';

declare type Install<T> = T & {
  install(app: import('vue').App): void;
};
declare const _default: Install< import("vue").DefineComponent<{
    sku: {
        type: ArrayConstructor;
        default: never[];
    };
    goods: {
        type: ObjectConstructor;
        default: {};
    };
    stepperMax: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    stepperMin: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    btnOptions: {
        type: PropType<string[]>;
        default: () => string[];
    };
    stepperTitle: {
        type: StringConstructor;
        default: string;
    };
    stepperExtraText: {
        type: (BooleanConstructor | FunctionConstructor)[];
        default: boolean;
    };
    btnExtraText: {
        type: StringConstructor;
        default: string;
    };
    buyText: {
        type: StringConstructor;
        default: string;
    };
    addCartText: {
        type: StringConstructor;
        default: string;
    };
    confirmText: {
        type: StringConstructor;
        default: string;
    };
    visible: {
        type: BooleanConstructor;
        default: boolean;
    };
    zIndex: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    duration: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    lockScroll: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnClickOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    position: {
        type: StringConstructor;
        default: string;
    };
    transition: {
        type: StringConstructor;
        default: string;
    };
    style: {
        type: PropType<import("vue").CSSProperties>;
        default: {};
    };
    popClass: {
        type: StringConstructor;
        default: string;
    };
    closeable: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeIconPosition: {
        type: StringConstructor;
        default: string;
    };
    closeIcon: {
        type: StringConstructor;
        default: string;
    };
    destroyOnClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    teleport: {
        type: (StringConstructor | {
            new (): Element;
            prototype: Element;
        })[];
        default: string;
    };
    overlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    round: {
        type: BooleanConstructor;
        default: boolean;
    };
    teleportDisable: {
        type: BooleanConstructor;
        default: boolean;
    };
    safeAreaInsetBottom: {
        type: BooleanConstructor;
        default: boolean;
    };
    overlayClass: {
        type: StringConstructor;
        default: string;
    };
    overlayStyle: {
        type: PropType<import("vue").CSSProperties>;
        default: {};
    };
}, {
    showPopup: any;
    closePopup: (type: string) => void;
    selectSku: (skus: any) => void;
    changeStepper: (value: number) => void;
    stepperOverLimit: (count: any) => void;
    clickBtnOperate: (btn: string) => void;
    add: (value: number) => void;
    reduce: (value: number) => void;
    getSlots: (name: string) => import("vue").Slot | undefined;
    translate: (keyPath: string, ...args: unknown[]) => string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("reduce" | "close" | "click-close-icon" | "click-overlay" | "update:visible" | "add" | "select-sku" | "change-stepper" | "click-btn-operate" | "over-limit")[], "reduce" | "close" | "click-close-icon" | "click-overlay" | "update:visible" | "add" | "select-sku" | "change-stepper" | "click-btn-operate" | "over-limit", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    sku: {
        type: ArrayConstructor;
        default: never[];
    };
    goods: {
        type: ObjectConstructor;
        default: {};
    };
    stepperMax: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    stepperMin: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    btnOptions: {
        type: PropType<string[]>;
        default: () => string[];
    };
    stepperTitle: {
        type: StringConstructor;
        default: string;
    };
    stepperExtraText: {
        type: (BooleanConstructor | FunctionConstructor)[];
        default: boolean;
    };
    btnExtraText: {
        type: StringConstructor;
        default: string;
    };
    buyText: {
        type: StringConstructor;
        default: string;
    };
    addCartText: {
        type: StringConstructor;
        default: string;
    };
    confirmText: {
        type: StringConstructor;
        default: string;
    };
    visible: {
        type: BooleanConstructor;
        default: boolean;
    };
    zIndex: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    duration: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    lockScroll: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnClickOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    position: {
        type: StringConstructor;
        default: string;
    };
    transition: {
        type: StringConstructor;
        default: string;
    };
    style: {
        type: PropType<import("vue").CSSProperties>;
        default: {};
    };
    popClass: {
        type: StringConstructor;
        default: string;
    };
    closeable: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeIconPosition: {
        type: StringConstructor;
        default: string;
    };
    closeIcon: {
        type: StringConstructor;
        default: string;
    };
    destroyOnClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    teleport: {
        type: (StringConstructor | {
            new (): Element;
            prototype: Element;
        })[];
        default: string;
    };
    overlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    round: {
        type: BooleanConstructor;
        default: boolean;
    };
    teleportDisable: {
        type: BooleanConstructor;
        default: boolean;
    };
    safeAreaInsetBottom: {
        type: BooleanConstructor;
        default: boolean;
    };
    overlayClass: {
        type: StringConstructor;
        default: string;
    };
    overlayStyle: {
        type: PropType<import("vue").CSSProperties>;
        default: {};
    };
}>> & {
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
    onAdd?: ((...args: any[]) => any) | undefined;
    onReduce?: ((...args: any[]) => any) | undefined;
    "onClick-close-icon"?: ((...args: any[]) => any) | undefined;
    "onClick-overlay"?: ((...args: any[]) => any) | undefined;
    "onSelect-sku"?: ((...args: any[]) => any) | undefined;
    "onChange-stepper"?: ((...args: any[]) => any) | undefined;
    "onClick-btn-operate"?: ((...args: any[]) => any) | undefined;
    "onOver-limit"?: ((...args: any[]) => any) | undefined;
}, {
    style: import("vue").CSSProperties;
    zIndex: string | number;
    round: boolean;
    overlay: boolean;
    visible: boolean;
    duration: string | number;
    lockScroll: boolean;
    overlayClass: string;
    overlayStyle: import("vue").CSSProperties;
    closeOnClickOverlay: boolean;
    position: string;
    transition: string;
    popClass: string;
    closeable: boolean;
    closeIconPosition: string;
    closeIcon: string;
    destroyOnClose: boolean;
    teleport: string | Element;
    teleportDisable: boolean;
    safeAreaInsetBottom: boolean;
    confirmText: string;
    sku: unknown[];
    goods: Record<string, any>;
    stepperMax: string | number;
    stepperMin: string | number;
    stepperExtraText: boolean | Function;
    stepperTitle: string;
    btnOptions: string[];
    btnExtraText: string;
    buyText: string;
    addCartText: string;
}>>;
export default _default;

declare module 'vue' {
  interface GlobalComponents {
      NutSku: typeof _default;
  }
}