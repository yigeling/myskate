import { defineComponent as m, computed as r, openBlock as p, createElementBlock as d, normalizeClass as u, unref as o, normalizeStyle as h, createElementVNode as f } from "vue";
const g = ["aria-labelledby"], y = /* @__PURE__ */ f("path", {
  d: "m211.145 1024 63.016-370.215L3.72 391.22l375.466-55.139L547.227 0l168.041 336.082 375.467 55.139-270.441 262.564L883.309 1024 547.227 848.082 211.145 1024zm336.082-265.19 231.057 120.78-44.636-254.687 186.42-178.544L662.756 409.6 547.227 178.544 431.7 409.6l-257.313 36.759 186.42 178.544-44.635 254.687 231.056-120.78z",
  fill: "currentColor",
  "fill-opacity": "0.9"
}, null, -1), _ = [
  y
], b = /* @__PURE__ */ m({
  __name: "StarN",
  props: {
    class: { type: String, default: "" },
    name: { type: String, default: "" },
    color: { type: String, default: "" },
    width: { type: [String, Number], default: "" },
    height: { type: [String, Number], default: "" }
  },
  emits: ["click"],
  setup(n, { emit: s }) {
    const t = n, c = (e) => {
      s("click", e);
    }, l = (e) => {
      if (e)
        return isNaN(Number(e)) ? String(e) : e + "px";
    }, i = r(() => {
      const e = "nut-icon";
      return {
        [t.class]: t.class,
        [e]: !0,
        [e + "-" + t.name]: t.name
      };
    }), a = r(() => {
      const e = {};
      return e.height = l(t.height), e.width = l(t.width), e.color = t.color, e;
    });
    return (e, S) => (p(), d("svg", {
      class: u(o(i)),
      style: h(o(a)),
      onClick: c,
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1177 1024",
      "aria-labelledby": n.name,
      role: "presentation"
    }, _, 14, g));
  }
});
export {
  b as default
};
