import { defineComponent as p, computed as r, openBlock as d, createElementBlock as m, normalizeClass as u, unref as s, normalizeStyle as h, createElementVNode as f } from "vue";
const g = ["aria-labelledby"], y = /* @__PURE__ */ f("path", {
  d: "M515.072 778.24c-14.336 0-28.672-5.632-39.936-16.384L69.12 356.864c-22.016-22.016-22.016-57.856 0-79.872s57.856-22.016 79.872 0L515.584 642.56 880.64 275.968c22.016-22.016 57.856-22.016 79.872 0s22.016 57.856 0 79.872L555.008 762.368c-10.752 10.752-25.6 15.872-39.936 15.872z",
  fill: "currentColor",
  "fill-opacity": "0.9"
}, null, -1), _ = [
  y
], b = /* @__PURE__ */ p({
  __name: "RectDown",
  props: {
    class: { type: String, default: "" },
    name: { type: String, default: "" },
    color: { type: String, default: "" },
    width: { type: [String, Number], default: "" },
    height: { type: [String, Number], default: "" }
  },
  emits: ["click"],
  setup(n, { emit: c }) {
    const t = n, l = (e) => {
      c("click", e);
    }, o = (e) => {
      if (e)
        return isNaN(Number(e)) ? String(e) : e + "px";
    }, i = r(() => {
      const e = "nut-icon";
      return {
        [t.class]: t.class,
        [e]: !0,
        [e + "-" + t.name]: t.name
      };
    }), a = r(() => {
      const e = {};
      return e.height = o(t.height), e.width = o(t.width), e.color = t.color, e;
    });
    return (e, w) => (d(), m("svg", {
      class: u(s(i)),
      style: h(s(a)),
      onClick: l,
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024",
      "aria-labelledby": n.name,
      role: "presentation"
    }, _, 14, g));
  }
});
export {
  b as default
};
