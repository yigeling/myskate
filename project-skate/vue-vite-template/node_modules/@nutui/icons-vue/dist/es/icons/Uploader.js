import { defineComponent as d, computed as o, openBlock as u, createElementBlock as m, normalizeClass as h, unref as r, normalizeStyle as f, createTextVNode as g, createElementVNode as c } from "vue";
const y = ["aria-labelledby"], _ = /* @__PURE__ */ c("path", {
  d: "M960 572.8H64c-25.6 0-48-22.4-48-48s22.4-48 48-48h896c25.6 0 48 22.4 48 48s-22.4 48-48 48z",
  fill: "currentColor",
  "fill-opacity": "0.9"
}, null, -1), w = /* @__PURE__ */ c("path", {
  d: "M512 1020.8c-25.6 0-48-22.4-48-48v-896c0-25.6 22.4-48 48-48s48 22.4 48 48v896c0 25.6-22.4 48-48 48z",
  fill: "currentColor",
  "fill-opacity": "0.9"
}, null, -1), b = /* @__PURE__ */ d({
  __name: "Uploader",
  props: {
    class: { type: String, default: "" },
    name: { type: String, default: "" },
    color: { type: String, default: "" },
    width: { type: [String, Number], default: "" },
    height: { type: [String, Number], default: "" }
  },
  emits: ["click"],
  setup(l, { emit: s }) {
    const t = l, i = (e) => {
      s("click", e);
    }, n = (e) => {
      if (e)
        return isNaN(Number(e)) ? String(e) : e + "px";
    }, a = o(() => {
      const e = "nut-icon";
      return {
        [t.class]: t.class,
        [e]: !0,
        [e + "-" + t.name]: t.name
      };
    }), p = o(() => {
      const e = {};
      return e.height = n(t.height), e.width = n(t.width), e.color = t.color, e;
    });
    return (e, x) => (u(), m("svg", {
      class: h(r(a)),
      style: f(r(p)),
      onClick: i,
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024",
      "aria-labelledby": l.name,
      role: "presentation"
    }, [
      _,
      g(","),
      w
    ], 14, y));
  }
});
export {
  b as default
};
