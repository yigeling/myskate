import { defineComponent as m, computed as l, openBlock as p, createElementBlock as d, normalizeClass as u, unref as o, normalizeStyle as h, createElementVNode as f } from "vue";
const g = ["aria-labelledby"], y = /* @__PURE__ */ f("path", {
  d: "M512 1024C231.131 1024 0 792.869 0 512S231.131 0 512 0s512 231.131 512 512-231.131 512-512 512zm0-936.229C277.943 87.771 87.771 277.943 87.771 512S277.943 936.229 512 936.229 936.229 746.057 936.229 512 746.057 87.771 512 87.771zM980.114 1024c-11.703 0-23.405-2.926-32.183-11.703L830.903 895.27c-17.554-17.555-17.554-43.886 0-61.44s43.886-17.555 61.44 0l117.028 117.028c17.555 17.554 17.555 43.886 0 61.44-5.851 8.777-17.554 11.703-29.257 11.703z",
  fill: "currentColor",
  "fill-opacity": "0.9"
}, null, -1), S = [
  y
], C = /* @__PURE__ */ m({
  __name: "Search",
  props: {
    class: { type: String, default: "" },
    name: { type: String, default: "" },
    color: { type: String, default: "" },
    width: { type: [String, Number], default: "" },
    height: { type: [String, Number], default: "" }
  },
  emits: ["click"],
  setup(n, { emit: s }) {
    const t = n, c = (e) => {
      s("click", e);
    }, r = (e) => {
      if (e)
        return isNaN(Number(e)) ? String(e) : e + "px";
    }, i = l(() => {
      const e = "nut-icon";
      return {
        [t.class]: t.class,
        [e]: !0,
        [e + "-" + t.name]: t.name
      };
    }), a = l(() => {
      const e = {};
      return e.height = r(t.height), e.width = r(t.width), e.color = t.color, e;
    });
    return (e, _) => (p(), d("svg", {
      class: u(o(i)),
      style: h(o(a)),
      onClick: c,
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024",
      "aria-labelledby": n.name,
      role: "presentation"
    }, S, 14, g));
  }
});
export {
  C as default
};
