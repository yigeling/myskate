import { defineComponent as p, computed as r, openBlock as d, createElementBlock as m, normalizeClass as u, unref as l, normalizeStyle as h, createElementVNode as f } from "vue";
const g = ["aria-labelledby"], y = /* @__PURE__ */ f("path", {
  d: "M1517.651 260.347a105.004 105.004 0 1 1 110.389 178.672c-165.84 102.483-331.68 204.737-497.636 307.277a157.649 157.649 0 0 1-165.554 0c-165.725-102.54-331.566-204.794-497.406-307.277a105.004 105.004 0 1 1 110.331-178.672l469.967 290.206 469.91-290.206",
  fill: "currentColor",
  "fill-opacity": "0.9"
}, null, -1), w = [
  y
], b = /* @__PURE__ */ p({
  __name: "ArrowDown",
  props: {
    class: { type: String, default: "" },
    name: { type: String, default: "" },
    color: { type: String, default: "" },
    width: { type: [String, Number], default: "" },
    height: { type: [String, Number], default: "" }
  },
  emits: ["click"],
  setup(n, { emit: s }) {
    const t = n, c = (e) => {
      s("click", e);
    }, o = (e) => {
      if (e)
        return isNaN(Number(e)) ? String(e) : e + "px";
    }, i = r(() => {
      const e = "nut-icon";
      return {
        [t.class]: t.class,
        [e]: !0,
        [e + "-" + t.name]: t.name
      };
    }), a = r(() => {
      const e = {};
      return e.height = o(t.height), e.width = o(t.width), e.color = t.color, e;
    });
    return (e, _) => (d(), m("svg", {
      class: u(l(i)),
      style: h(l(a)),
      onClick: c,
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 2252 1024",
      "aria-labelledby": n.name,
      role: "presentation"
    }, w, 14, g));
  }
});
export {
  b as default
};
