import { defineComponent as p, computed as o, openBlock as u, createElementBlock as m, normalizeClass as h, unref as r, normalizeStyle as f, createTextVNode as g, createElementVNode as c } from "vue";
const y = ["aria-labelledby"], S = /* @__PURE__ */ c("path", {
  d: "M510.613 2.837C229.793 2.837.032 232.598.032 513.418S229.793 1024 510.613 1024s510.582-229.762 510.582-510.582S794.27 2.837 510.613 2.837zm0 794.238c-156.01 0-283.656-127.646-283.656-283.657s127.645-283.656 283.656-283.656S794.27 357.407 794.27 513.418 666.624 797.075 510.613 797.075z",
  fill: "currentColor",
  "fill-opacity": "0.9"
}, null, -1), C = /* @__PURE__ */ c("path", {
  d: "M382.968 513.418a127.645 127.645 0 1 0 255.29 0 127.645 127.645 0 1 0-255.29 0Z",
  fill: "currentColor",
  "fill-opacity": "0.9"
}, null, -1), w = /* @__PURE__ */ p({
  __name: "CheckChecked",
  props: {
    class: { type: String, default: "" },
    name: { type: String, default: "" },
    color: { type: String, default: "" },
    width: { type: [String, Number], default: "" },
    height: { type: [String, Number], default: "" }
  },
  emits: ["click"],
  setup(l, { emit: s }) {
    const t = l, i = (e) => {
      s("click", e);
    }, n = (e) => {
      if (e)
        return isNaN(Number(e)) ? String(e) : e + "px";
    }, a = o(() => {
      const e = "nut-icon";
      return {
        [t.class]: t.class,
        [e]: !0,
        [e + "-" + t.name]: t.name
      };
    }), d = o(() => {
      const e = {};
      return e.height = n(t.height), e.width = n(t.width), e.color = t.color, e;
    });
    return (e, _) => (u(), m("svg", {
      class: h(r(a)),
      style: f(r(d)),
      onClick: i,
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1032 1024",
      "aria-labelledby": l.name,
      role: "presentation"
    }, [
      S,
      g(","),
      C
    ], 14, y));
  }
});
export {
  w as default
};
