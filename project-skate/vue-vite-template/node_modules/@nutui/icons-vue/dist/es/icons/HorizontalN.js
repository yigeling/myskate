import { defineComponent as m, computed as o, openBlock as p, createElementBlock as d, normalizeClass as h, unref as r, normalizeStyle as u, createElementVNode as f } from "vue";
const g = ["aria-labelledby"], y = /* @__PURE__ */ f("path", {
  d: "M977.455 124.121H46.545C21.721 124.121 0 102.4 0 77.576S21.721 31.03 46.545 31.03h930.91c24.824 0 46.545 21.722 46.545 46.546s-21.721 46.545-46.545 46.545zm0 868.849H46.545C21.721 992.97 0 971.248 0 946.424s21.721-46.545 46.545-46.545h930.91c24.824 0 46.545 21.721 46.545 46.545s-21.721 46.546-46.545 46.546zm0-434.425H356.848c-24.824 0-46.545-21.72-46.545-46.545s21.721-46.545 46.545-46.545h620.607c24.824 0 46.545 21.72 46.545 46.545s-21.721 46.545-46.545 46.545z",
  fill: "currentColor",
  "fill-opacity": "0.9"
}, null, -1), _ = [
  y
], C = /* @__PURE__ */ m({
  __name: "HorizontalN",
  props: {
    class: { type: String, default: "" },
    name: { type: String, default: "" },
    color: { type: String, default: "" },
    width: { type: [String, Number], default: "" },
    height: { type: [String, Number], default: "" }
  },
  emits: ["click"],
  setup(n, { emit: l }) {
    const t = n, c = (e) => {
      l("click", e);
    }, s = (e) => {
      if (e)
        return isNaN(Number(e)) ? String(e) : e + "px";
    }, i = o(() => {
      const e = "nut-icon";
      return {
        [t.class]: t.class,
        [e]: !0,
        [e + "-" + t.name]: t.name
      };
    }), a = o(() => {
      const e = {};
      return e.height = s(t.height), e.width = s(t.width), e.color = t.color, e;
    });
    return (e, S) => (p(), d("svg", {
      class: h(r(i)),
      style: u(r(a)),
      onClick: c,
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024",
      "aria-labelledby": n.name,
      role: "presentation"
    }, _, 14, g));
  }
});
export {
  C as default
};
