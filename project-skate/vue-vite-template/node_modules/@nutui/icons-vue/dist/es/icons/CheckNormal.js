import { defineComponent as m, computed as r, openBlock as p, createElementBlock as d, normalizeClass as u, unref as s, normalizeStyle as h, createElementVNode as f } from "vue";
const g = ["aria-labelledby"], y = /* @__PURE__ */ f("path", {
  d: "M512 1024c-136.533 0-264.533-54.044-361.244-150.756C54.044 776.534 0 648.534 0 512c0-136.533 54.044-264.533 150.756-361.244C247.466 54.044 375.466 0 512 0c136.533 0 264.533 54.044 361.244 150.756C969.956 247.466 1024 375.466 1024 512s-54.044 264.533-150.756 361.244C776.534 969.956 648.534 1024 512 1024zm0-938.667c-113.778 0-221.867 45.511-301.511 125.156S85.333 398.222 85.333 512s45.511 221.867 125.156 301.511S398.222 938.667 512 938.667s221.867-45.511 301.511-125.156S938.667 625.778 938.667 512 893.156 290.133 813.51 210.489 625.778 85.333 512 85.333z",
  fill: "currentColor",
  "fill-opacity": "0.9"
}, null, -1), C = [
  y
], w = /* @__PURE__ */ m({
  __name: "CheckNormal",
  props: {
    class: { type: String, default: "" },
    name: { type: String, default: "" },
    color: { type: String, default: "" },
    width: { type: [String, Number], default: "" },
    height: { type: [String, Number], default: "" }
  },
  emits: ["click"],
  setup(n, { emit: l }) {
    const t = n, c = (e) => {
      l("click", e);
    }, o = (e) => {
      if (e)
        return isNaN(Number(e)) ? String(e) : e + "px";
    }, i = r(() => {
      const e = "nut-icon";
      return {
        [t.class]: t.class,
        [e]: !0,
        [e + "-" + t.name]: t.name
      };
    }), a = r(() => {
      const e = {};
      return e.height = o(t.height), e.width = o(t.width), e.color = t.color, e;
    });
    return (e, S) => (p(), d("svg", {
      class: u(s(i)),
      style: h(s(a)),
      onClick: c,
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024",
      "aria-labelledby": n.name,
      role: "presentation"
    }, C, 14, g));
  }
});
export {
  w as default
};
