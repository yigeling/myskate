import { defineComponent as m, computed as r, openBlock as p, createElementBlock as d, normalizeClass as u, unref as o, normalizeStyle as h, createElementVNode as f } from "vue";
const g = ["aria-labelledby"], y = /* @__PURE__ */ f("path", {
  d: "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm144.1 454.9L437.7 677.8c-1.4 1-3 1.5-4.7 1.5-4.4 0-8-3.6-8-8V353.7c0-1.7.5-3.3 1.5-4.7 2.6-3.6 7.6-4.4 11.2-1.8L656.1 506c.7.5 1.3 1.1 1.8 1.8 2.6 3.5 1.8 8.5-1.8 11.1z",
  fill: "currentColor",
  "fill-opacity": "0.9"
}, null, -1), _ = [
  y
], C = /* @__PURE__ */ m({
  __name: "PlayCircleFill",
  props: {
    class: { type: String, default: "" },
    name: { type: String, default: "" },
    color: { type: String, default: "" },
    width: { type: [String, Number], default: "" },
    height: { type: [String, Number], default: "" }
  },
  emits: ["click"],
  setup(l, { emit: s }) {
    const t = l, c = (e) => {
      s("click", e);
    }, n = (e) => {
      if (e)
        return isNaN(Number(e)) ? String(e) : e + "px";
    }, i = r(() => {
      const e = "nut-icon";
      return {
        [t.class]: t.class,
        [e]: !0,
        [e + "-" + t.name]: t.name
      };
    }), a = r(() => {
      const e = {};
      return e.height = n(t.height), e.width = n(t.width), e.color = t.color, e;
    });
    return (e, S) => (p(), d("svg", {
      class: u(o(i)),
      style: h(o(a)),
      onClick: c,
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024",
      "aria-labelledby": l.name,
      role: "presentation"
    }, _, 14, g));
  }
});
export {
  C as default
};
